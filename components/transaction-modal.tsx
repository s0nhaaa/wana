import Link from "next/link"
import { formatAddress } from "@/helpers/format-address"
import { parseName, parseProtocol } from "@/helpers/parser"
import { useAppStore } from "@/stores/app"
import { cx } from "class-variance-authority"
import { motion } from "framer-motion"
import { Glasses, Puzzle, X } from "lucide-react"
import moment from "moment"

import { ShyftTxParsedHistory } from "@/types/shyft-tx-parsed-history"
import {
  COLORS,
  GENERATIVE_COLORS,
  SHYFT_TRANSLATOR_ENDPOINT,
} from "@/config/constants"
import { randomElement } from "@/config/random-element"
import { Button } from "@/components/ui/button"
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card"
import { Label } from "@/components/ui/label"
import { ScrollArea } from "@/components/ui/scroll-area"

import GenerativeBackground from "./generative-background"
import TxStatus from "./tx-status"
import { AspectRatio } from "./ui/aspect-ratio"

interface TransationModalProps {
  id: string
  tx: ShyftTxParsedHistory
  onClick: () => void
}

export default function TransactionModal({
  id,
  tx,
  onClick,
}: TransationModalProps) {
  const cluster = useAppStore((state) => state.cluster)

  return (
    <div className="absolute inset-0 z-30 flex select-none items-center justify-center">
      <motion.div
        key="image"
        layoutId={id}
        className="relative flex h-fit w-[60vw] select-none rounded-lg bg-background"
      >
        <Button
          className="absolute right-4 top-4 h-9 w-9 p-1"
          variant={"outline"}
          onClick={onClick}
        >
          <X size={16} />
        </Button>

        <Card className="w-[60%] border-none">
          <CardHeader>
            <CardTitle className="flex flex-col gap-2">
              <Label
                htmlFor="transaction-title"
                className=" text-muted-foreground "
              >
                Title is generated by GPT
              </Label>
              <p className="px-0 text-2xl">{tx.generatedName}</p>
            </CardTitle>
            <CardDescription className="flex flex-col gap-2">
              <div>
                Made by{" "}
                <Link
                  className="group relative  text-primary hover:underline"
                  href={
                    new URL(
                      `address/${tx.protocol.address}?${
                        cluster !== "mainnet-beta" ? `cluster=${cluster}` : ""
                      }`,
                      SHYFT_TRANSLATOR_ENDPOINT
                    )
                  }
                  target="_blank"
                >
                  {parseProtocol(tx.protocol)}
                </Link>{" "}
                {moment(tx.timestamp).fromNow()}
              </div>
              <div className="flex gap-2">
                <TxStatus status={tx.status} />
              </div>
              <div className="mt-2 flex gap-2">
                Transaction finished with {tx.actions.length} action
                {tx.actions.length > 1 && "s"}:
              </div>
            </CardDescription>
          </CardHeader>
          <CardContent className="-mt-4">
            <ScrollArea className="h-[300px] w-full">
              <div className="grid gap-3">
                {tx.actions.map((action, index) => (
                  <div
                    key={index}
                    className=" flex w-full flex-col space-x-4 rounded-md border p-4"
                  >
                    <div className="flex-1 space-y-1">
                      <p className="flex items-center gap-2 text-sm font-medium leading-none">
                        <div className="rounded-lg bg-[#3abff8] p-2 text-[#002b3d]">
                          #{index + 1}
                        </div>
                        {parseName(action.type)}
                      </p>
                    </div>
                  </div>
                ))}
              </div>
            </ScrollArea>
          </CardContent>
          <CardFooter className=" flex-row-reverse gap-2">
            <Link
              href={
                new URL(
                  `address/${tx.protocol.address}?${
                    cluster !== "mainnet-beta" ? `cluster=${cluster}` : ""
                  }`,
                  SHYFT_TRANSLATOR_ENDPOINT
                )
              }
              target="_blank"
            >
              <Button variant={"outline"}>
                <Glasses className="mr-2 h-4 w-4" /> View on Shyft Transalator
              </Button>
            </Link>
          </CardFooter>
        </Card>

        <Card className="flex w-[40%] flex-col justify-between border-none">
          <CardHeader>
            <CardTitle className="flex flex-col gap-2">
              <Label className="text-muted-foreground ">
                NFT is generated by GPT
              </Label>
            </CardTitle>
          </CardHeader>
          <CardContent className="-mt-2">
            <div className="relative w-full">
              <AspectRatio
                ratio={1 / 1}
                className="overflow-hidden rounded-lg "
              >
                <GenerativeBackground
                  name={tx.signatures[0]}
                  colors={GENERATIVE_COLORS}
                  size={500}
                  className="rounded-lg "
                  title="sh"
                  square={true}
                />
              </AspectRatio>
              <p className="absolute left-4 top-4 text-sm font-medium text-[#ffffff]">
                WANA
              </p>
              <p className="absolute right-4 top-4 text-sm font-medium text-[#ffffff]">
                SHYFT
              </p>
              <p className="absolute left-[18px] top-[75px] text-[36px] font-bold text-[#ffffff]">
                {tx.generatedName ? tx.generatedName : parseName(tx.type)}
              </p>
              <p className="absolute bottom-5 right-6 text-[36px] font-bold text-[#ffffff]">
                #{formatAddress(tx.signatures[0])}
              </p>
              <div className="absolute bottom-7 left-5 flex flex-col gap-2">
                <div
                  className="h-4 w-4 rounded-sm"
                  style={{ backgroundColor: randomElement(COLORS) }}
                ></div>
                <div
                  className="h-4 w-4 rounded-sm"
                  style={{ backgroundColor: randomElement(COLORS) }}
                ></div>
                <div
                  className="h-4 w-4 rounded-sm"
                  style={{ backgroundColor: randomElement(COLORS) }}
                ></div>
              </div>
            </div>
          </CardContent>
          <CardFooter className=" flex-row-reverse gap-2">
            <Button>
              <Puzzle className="mr-2 h-4 w-4" /> Mint transaction as NFT
            </Button>
          </CardFooter>
        </Card>
      </motion.div>
    </div>
  )
}
